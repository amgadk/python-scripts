import yaml, getpass # Import PyYAML and getpass
from netmiko import ConnectHandler # Make sure netmiko is installed (pip install netmiko)import ConnectHandler from the netmiko module


with open('devices.yaml') as device_yaml: 
        devices = yaml.safe_load(device_yaml)

# Collect username from user and store it to a variable called "cred_user"   
cred_user = input("Please enter the username for ssh: ") 
   
''' Collect password from user, but use getpass in order to keep the password from dispalying on the screen. '''
cred_pass = getpass.getpass("Please enter the password for ssh: ")

tokens = ["eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhc2V0SUQiOjY5NDg0MDkxNzI0ODQ0Mjg3OTMsImV4cCI6MTY2NzM1OTU5MCwia2lkIjoiOGJhYzZjYTRhZDk1Y2U0NiIsIm5iZiI6MTY2NDc2NzU5MCwicmVlbnJvbGxEZXZpY2VzIjpbIioiXX0.LuDz5KzrpxJmGF_e_6IVJaDUxQhAkaod-I6zpR7Bw1rU9TOy8asr1V0mpZSQudB66p0pEFmREY3zolhSTvCbamRLK1KRiN5oS9QXdJZclg1MLzpCu5_eTBpW4eXH6D-tYyTPrGtG5clQXjYipDJcVNJo3tkMP0e65E_fsCqBK9h1-tNhslojnXQYml_AY54SiNovvE_xOniBXZFFncxdc3zBCYEDdnMoe2E2WSryqEK7SvxnJfMvxMiaS2-hDmdsFADnmiACsaySoamRfX1nP0Dll9NpILkC6tmewOhkCyO5TXT7Nn64g8PL2rPMzRADU5QqYAWOk37_7NO-elMdbyUQ5hbYlT2FCtfMKdzD7rN70xK2Ic3BHAITWjVww8OMCd9cir-Av3Nn4eXZPuLL0bHKfGg6bFHQV26FclL0kRnhD9GB_2FvIHKNpNIgetW0UNDs8-CkH5nT936LQjSp1vK-CQodaBFAzVht1FiFXfUgc6veBQ7orTN71ycBhC9mgIyDLgDeX9TqbnQJqLhIG0k1cVVTCKri8yDB9rmeZcHio7fOM33wE2HzaUXWwohrei2hvy2s-C2lN1txlwyC8Yz69gz2TRTYHBg5Max6DD5mnBjUQVrbUEJJ2S1VToilOVZbTu91xiUN-IirnoAn7Zyeej50PoMA5cPXK71COr0", "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhc2V0SUQiOjY5NDg0MDkxNzI0ODQ0Mjg3OTMsImV4cCI6MTY2NzM1OTYwNCwia2lkIjoiOGJhYzZjYTRhZDk1Y2U0NiIsIm5iZiI6MTY2NDc2NzYwNCwicmVlbnJvbGxEZXZpY2VzIjpbIioiXX0.frV3VfMptQv83KBkxbdPX3Invup8IuQBMi2YtsE-flR-T9oq03VDH-lSKiF-Kq9QLLC0NUhL-FHK71ItOrUdWkPnZHBkiXF3AQNzvpdzUBSs0R6badXMRE0LdDtqsdd3Ob3vuVvwDDF8xbvoy2Mm0BSSBPBKGSf27cJI8CvdJLlv8pqVfCgondiMjyNKSUR-3tuixSA518biHuZqaKXg-CysLEEqaM9oBijFO9GJWhkywqdutf2arskQ8AgutYvp4tzVevz-UENISSi1WNzGXr-MkwKCBf_w6iQfKUqPpLWmgeaLyHpKEBMDutwyKvstu8v-NmCItM9p3GMRFDw9FFE-JSXsjkiAt7Rr7JK8JSRPK-DQoq0q65Lr0Wkw2wMFRGardaOIxg2i2MTzgDRSEr_zusM4N3mpiB9PVVdTOe0ui8L9Yw_T-RkJy1wZQXpXocuRo6o3AvmUO_qfCw6YdT2TGjZWiDbCQAL4mVm7eu9ahIUbjETNlp7B0_j8wNJMTgWA-_O6yE8Pca9kPsc77bRUzbkd3SGTY117N7dKlcQRDY2ZOpd8vqY-pT2TJQburLU2NDWAKEG1XzfJSwcMVNs_uYNHu9MkMrN3WO4jz9JMRJHgDfmtxme0jtpwmDUthcIe_ENd-X8TarlvpQAPwPJTAkcfnV8d5OPess1uXaM","eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhc2V0SUQiOjY5NDg0MDkxNzI0ODQ0Mjg3OTMsImV4cCI6MTY2NzM1OTYxOCwia2lkIjoiOGJhYzZjYTRhZDk1Y2U0NiIsIm5iZiI6MTY2NDc2NzYxOCwicmVlbnJvbGxEZXZpY2VzIjpbIioiXX0.gPFBzYi9uy5wMRWttVhSzZ8PF3os1FlnJxXz7YEnD3s3Wcon61dmk5QRsfIfp_tQAmn7s0h8VLeLIT9p5plE6wAyqRH9alZYkobxVh_74UPtpae1chddnSM7mMWedKNVGOMwG_13TsH3PR8orjxRpfzLJKtgOI5WaB0GX_GiaBCI-YBoLcG2Gr7TScb-SKVjHPHANI3k6mGBjPCdEdtx7UAZho8fCPHTmAAuf4S0R4icjYwPbrJhHsyxmd244mfRozO7hUV3b82Nh2RM4gKhwycDU14z2f3vBHtTEkkGtICnOw_Kv2hlKnkAlug7hQyBOg3u6NYKjImKn-eUXrVsbcPBrwz6sZmsOt3Nen5MCMIkHOjtbU7zpIBiZMrSS1MxKggkeoWj0DByPQ_Sj6TiIZ8j3og-nN4COjgWa9_b09Qv-cfAs0xZJDgXk8HFlJonM8ZRLP_OuDOVSiHnrVP2waRaWp2r8t7PNpNcP4w1EJyzA_7F6p5FqVYEXA8k8XO4L-WlJCyTKR1WwpVtepGZY7jE0iChelijgRGVb91l7TJq3CqBfhwii-5xTb3EefIK-ktHQdx6wKdrUzalodYEMCstbx_RGAP7-PXb5-jxzKjFtkNOoYzN5inky6NI-0X3pxjvo968eI21gRDQp_ZYcNKMf6B5lkTxBwyGF_AbaSY", "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhc2V0SUQiOjY5NDg0MDkxNzI0ODQ0Mjg3OTMsImV4cCI6MTY2NzM1OTYzNywia2lkIjoiOGJhYzZjYTRhZDk1Y2U0NiIsIm5iZiI6MTY2NDc2NzYzNywicmVlbnJvbGxEZXZpY2VzIjpbIioiXX0.TRKlcr_WfIcZ-3E4dEAz84qR6SMUL-msgjFwqBrpm0eYQGWU3HwxdxOK0TVIb1nzIfjO8xdP6wzT27NUGcp3YRXiEl8-RhU6lgSqd6PjK16IWl_V1-9XiPXDKOojpakOfc6HSCRlV1G02XwgNAIqr-zCMUwOECPemhgCprRDjmLD-6Ia8nJ9OFFgs3bsXmkNDo7RzlT7mWYrmXvyMFOmQzDkR83BTxJ6SKxWijIRJaoEl9dMv8kKHuIHg5jKBAe5owDQFoCh52M9z4LyLCJfzZpLeAJFaLS8tirCB6vSqfARazONL7Xaut676FLqIN-uSDrbrXUmIi2EIaNDZXUQGQLFP_CHMsxy3wyFeqgQ_Ukqytzv_ctYzkXMCPdCjfO1fDqvNzzfzvuEyknn0KMwAR17_r2CuLkXEscFRB9fiyyhKHJYE90zkVrBDxBtWG__xUf-CnOIbzbKu7akmYBt3j8UzEX9tIPHK3pMASOvDMgLyZpN-9hH-EiYGsfrFC2iFNwWSJX9OgVzyB07S8tvQLjcAv_GJvpeIjdc0SFZwG3V-NYdxz3HYb7F93MneOVUZIGFiUSPiuHtQwJNxC1-VKOcSp2fXaIfVvPPuJm0yW-Mt7OuUWpZ4rzmk3roxDhKFRuTEOj8paTcwRlExpYzaJUxB7C39zHIddRFjzG_YdQ", "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhc2V0SUQiOjY5NDg0MDkxNzI0ODQ0Mjg3OTMsImV4cCI6MTY2NzM1OTY3NCwia2lkIjoiOGJhYzZjYTRhZDk1Y2U0NiIsIm5iZiI6MTY2NDc2NzY3NCwicmVlbnJvbGxEZXZpY2VzIjpbIioiXX0.ihlunmcn2P9wcyANfIhN4Vlf9sGGmnslanf2zJdtYAOy-r3kozABDcnoehHw-GYfJ-KfVyRa8Rh4Bhucjoighac3VX61zdTN5eRXhSf0K0gxqbSXVMYkA1pJJEpd0mm6i48JF_Q3ua5ysrSMebYUD2gQVUWtqEMb1fgN7-syVxdLlXjqNOlJlx5T1bblVM6_3nmJhyA1TKUxo9hUVC96TxmTIJE4BKz1vE_I1uc-WRfBvEk0jnNCvuVc1_3jlrJyd68bEOYQmfyfTvuDO51nUJmUJnUfg4CeybrnMe7FfsoPFTqFL_kVTSZMgyehFEjsKqd4i-f8nqH9iQPmwVIsO5a7HEK5BSNi_C4vrEdWvJYcgHWZcBig0OmtQBtIZhd8OZAbrtDfjZEQNzhsF3Zz8ZRxohoQGbaUTEwUeuGqgm9ogFyRcT0Wh5I3mXP0Cjl6ZIRs2xshxEY156It0ffkstq0GJ7_cu54PnhktgaIB3_G606No7jVOFk7G_nbBJdjI9gnW196BWxqXbwIJQ2GFRHxY0JJHYclkJWRy_wHb46_iSl4Wt5HwZ_s4QCjEi6V8a3wfswqkCUXpz_giqsA9a6MpTOPxfnqN313hDxtjLH8snKxlHV6iqbqtYmk_yjqXL-DlC3GmIOjw7A8WrPIjDAl1H5BjQNaaQgU6UDzLzE", "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhc2V0SUQiOjY5NDg0MDkxNzI0ODQ0Mjg3OTMsImV4cCI6MTY2NzM1OTY5Nywia2lkIjoiOGJhYzZjYTRhZDk1Y2U0NiIsIm5iZiI6MTY2NDc2NzY5NywicmVlbnJvbGxEZXZpY2VzIjpbIioiXX0.Sc8xSUiRDEcqp90v1HN-o79GusCuGPkcfHOe9cA83F-4jV3ga_KXTM1h4xr6StgHbRIQOw0_R7ryeJDpEHpcokZSJavkOXIcz1DImupgHPmfdLwHVzbY8XEJqwn8bb3BHELFklO_mRCJkTVNfTPYPB4MjxlJ3DcAOE0gfUBGGyYYf0f4gNXiGHs7_4SBJU6I3CMEkm0olVHXIrX-5NavDBCz3BO2K9siRCDPkDpkUcLpSG7BWj0cNWQJm9xJX4u34509UMZ4XKK_UoAoyFUS4q59TWUhMkfouQ-LIRFcFx-Rj5VX_Yv6i-ks7jUYaAZEND824sE-c2MsFANIYU8LIYSRm2aL1DZx1VSID85AdNPew-KcbDo5Mn-yH_Jo22H7A2ICbkrWIGIYhIBwaQknR3Wk2Fx9N09Q__yJ_YgZVO9x6SdtUHKydv_zIqB4ecDCCefPK1qKrPDaoAJaOEGSXj_MH3zBN2oLHQ4EH16U-tItDs7mRhM77gV1XWGgNAff-pF9ztGSr-Fz79ftRYprS7fFbEemT-9d51Kwmf73zgkG12otnc3e1hzJHzVOB0VFtvyuN1krBOnS_rRsfXcecbUZOP-V_a7tzrqzTyA1REn_mKSagpJYbClrU3FFCmZhXiwc8UkQTp2g0AumI7BkPRt4u-cGpLNqD8PsBz9WTn4", "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhc2V0SUQiOjY5NDg0MDkxNzI0ODQ0Mjg3OTMsImV4cCI6MTY2NzM1OTcxMiwia2lkIjoiOGJhYzZjYTRhZDk1Y2U0NiIsIm5iZiI6MTY2NDc2NzcxMiwicmVlbnJvbGxEZXZpY2VzIjpbIioiXX0.VnvZ5I2d4nr6LYoBbMjDAujr0vBoWhEC6hRYIzH4PrtaazCBqyoCjKB-iPlJkypbdx7_QwATYKYgLPByMKKLdapc_ZhoV0P99aRH4VIBJADs9mMh1xDE-AdkAzhDR2bKBM8CI_OxrfxUDVioso3CSzBFI7mGxmGP7b4q8_ujYxFErIcK1JuiZpGEUJyT0TabHb9mZRO7QyvePYLLs2AHl9RXX35MIL-KWYTs7XsQkOc6fqA7T9Ej6T-vPBBW9NFJ1PTN0jhd2sxpxPIJTbks7GEor_8qQVPaMZ71-ZmISFLaWHCpt1I7hFCltO_tRwjG7QypHp0WHhB2PxuBfclSXp2TiKSXCvmM-8FD3yzHP1Ha6LM015BL7bH2LDW9dxTtBG0oqLGAWhhVazynTde0kFzEntgbcq4CThhy9K86JT74Ta7auQw_O-iXAl-0Ofwx5d-dnfktE6EOhJDIZZhKhZn9zv_hisjRai7YgFknenGQXj7irL4EYNd6rQMCZCctg6CIa2bW8vNNkM6sWZdYnWUbQKPxfdAFxADrRMG4XGWRTPOu-OAOe4-ZIQwfov_syYpbVBzoYlLmJCbsCOJhuHFHtIL_D3pg7ZGfcBosIPVPiPb_ALI0WOFTNMYZpaDSQZi6_WzUmkacZg5uiy5ee5-Hy49bgk6ujputOOOsoCk", "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhc2V0SUQiOjY5NDg0MDkxNzI0ODQ0Mjg3OTMsImV4cCI6MTY2NzM1OTcyMywia2lkIjoiOGJhYzZjYTRhZDk1Y2U0NiIsIm5iZiI6MTY2NDc2NzcyMywicmVlbnJvbGxEZXZpY2VzIjpbIioiXX0.YFAu9UXlfc7p1Pk1zHHyMC2EHW2EhJL3T9eZ6jjDS0SH4C1iBPnuiLTTZ0BLBas3MttiJIG6t4coVdobBVZySPUGVupA4ddlMzTTrl7nsRbSRhQugbTYcy3vMEiyw50zgXO9k3qnXVzN31H98TV9glhQ2LeQ4JZyM6zRbR2-3pCK5CG-GcFLnr36ZiUNO2FZZ-useJztXhh87TAL-xxxlEymOBVzzrK4Gdru5KP87KMv_DW9NOcobRXCLnvQGwjYkaru07WQUtVT-mu_Dzyfs8nYljynq2wNPeP4cA_Z0yZcuczUAmVhG2eBFWwZSoaajjKBuuvNgNDRdQ9Eeis7dI10qvfg7Ntr7RQNEkPkwiTP7fd7816sYh95Wel-imGSNNTeSd6zakPm-98pi3EQ8OFcDkOlbqlVJ-k-xPL_Z2LGdMXT1vH8oi33ueNgU3e3fKcXqM5L_QtwINsPexPyggbyhM2eYYS3U29SMafe8EiPgRRcn2dsqDongDWkF3KqoHyeMrXtR7iSJzvlMg4mP97N6uhX7JdjjUMragC6NhEhscm4aIM46zZZABWGq-R2xsBHRnsuNxzmX7RcyhWhsxApyn0ydB--7I7MAbg_pKCcUfO1ntBe7PdeK7css5ZC-QlRlgI9r0aRf_8ZlqZfSAItfC1mLNZYoYlbsU_UeIE", "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhc2V0SUQiOjY5NDg0MDkxNzI0ODQ0Mjg3OTMsImV4cCI6MTY2NzM1OTczNiwia2lkIjoiOGJhYzZjYTRhZDk1Y2U0NiIsIm5iZiI6MTY2NDc2NzczNiwicmVlbnJvbGxEZXZpY2VzIjpbIioiXX0.Lp3VksHqmZpZqOgxJEe7g6oQ-PzmcFFRKaVZK0Ir0MbOQUJ1L45CdfX8jBdcbd7-A69gkFm0kKszGTfpITuOuDoVNgKoUw_zn-2l577kkgTBEIEF_26t5jgBdeTZbfEv64gUlLYsd5c7tlU4pQqMhwsoBjyEkSrY9grVVmvhuMlzffDKwkCU-BCqKRTuIAqzLyVTEgXBUGofPgg_aRJgNR029YtYTHOCqUdUGT_Y4Ix1VKz_CicqHWu_60c9V3rLg7zIkVVus-eWq8sxT5fah1JjwxzefxpUWHRSrqImO9vSMTY6_Y_pbK7oprPoxjDmk5LeJWC-vkSWWaU5Jzsj9-V003Ce5l0-RgVIGlRBesr-k-OI70cCpMFaCr5BoMV-x6xEU6YFsouc3I0_aH8gtggD91TdJFHh8zqVjsojjHhKc-QUSjJJt1TsRoGUOzLFQXM8CPiaUr_1EL8umX-sS2UA-sU6PXjwFgvpzBDH0hAO-TyfAPeOmpBiNVCaIAV_O2EAfenLdGObMjDbjB7d43X_MJJn1csBHleEXYQP658zTREz55sq6HwqQlZOLizEWcWyPB0dcLi1WtoNz6jCDRvnBianP0Qgu2hOi1bafts_nS-mXaE-aLNrTvjLASAddLRBSM-qR9xrdWYmha4RQTuoiKiD9fLy_GCs0PF2tXA"]

i = 0

for hostname, ip in devices.items():
            print("Establishing connection to %s..." % hostname)
            # Try to establish a connection to the device.
            try: 
                net_connect = ConnectHandler(device_type='arista_eos', ip=ip, 
                username=cred_user, password=cred_pass,fast_cli=False)
            
                # Enter Privileged EXEC mode
                net_connect.enable()
                
                # Enter Global Configuration
                net_connect.config_mode()
                
                ''' Print an output letting the user know that you are sending 
                the commands and then send the list of commands to enable eAPI '''
                print("Adding cvp details...")
                net_connect.send_config_set(['terminal width 2000','event-handler saveToken','trigger on-boot','action bash echo ' +tokens[i] + ' > /tmp/token'])
                net_connect.send_config_set(['daemon TerminAttr','exec /usr/bin/TerminAttr -cvaddr=apiserver.arista.io:443 -cvcompression=gzip -taillogs -cvauth=token-secure,/tmp/token -smashexcludes=ale,flexCounter,hardware,kni,pulse,strata -ingestexclude=/Sysdb/cell/1/agent,/Sysdb/cell/2/agent','no shutdown'])
                # Inform user of completion on the device
                print("Finished Configuring %s." % hostname)
                #i += 1
                print("Reloading......")
                net_connect.send_config_set(['write','reload force'])
            # If connection has an error, tell the user
            except:
                print("*****Error connecting to %s*****" % hostname)
            


